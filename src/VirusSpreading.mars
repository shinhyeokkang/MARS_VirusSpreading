model VirusSpreading

use Mars

grid-layer City as city


agent Human on City{
	observe var Rule = ""
	observe var Energy : integer //when energy goes to 0, human die.
	observe var Infected : bool = false
	observe var Immune : bool = false
	observe var Obedient : bool = false
	observe var Vulnerable : bool = false
	observe var Ticks : integer
	observe var LossTicks : integer //count for recover
	observe var R0 : integer
	observe var DeadTick : bool = false
	
	external observe var Human_gain_by_age : integer
	external observe var Vulnerable_class_ratio : integer
	external observe var Obey_ratio : integer
	external observe var Government_announce_date : integer 
	external observe var Initial_infected_rate : integer
	
	external var Infection_rate1 : integer
	external var Infection_rate2 : integer
	
	passive IsInfected() => return Infected 
	passive IsImmune() => return Immune
	passive SetInfected(Bool : bool) => Infected = Bool
	
	initialize{
		//Spawn somewhere in the grid when the simulation starts
		pos at #(random(city.DimensionX), random(city.DimensionY))
		
		R0 = 0
		Ticks = 0
		LossTicks = 0
		
		var Class = random(100)
		if(Class < Vulnerable_class_ratio) {
			Energy = random(Human_gain_by_age);
			Vulnerable = true
		}
		else {
			Energy = random(Human_gain_by_age) + 40
		}
		
		var infect = random(100)
		if(infect < Initial_infected_rate) {
			Infected = true
		}
	}
	
	tick {
		Ticks++
		
		if(Obedient === false){RandomMove()}
		
		if (Infected === true) {
			var NearestHuman = nearest Human
			if (NearestHuman !== nil) {
				var NearestDistance = distance(NearestHuman)
				if (NearestDistance <= 2) {		// can only infect if nearest human is close enough
					var Neighbors = explore Human in 2		// explore in radius 2
					each (var Neighbor in Neighbors) {		// for each Neighbor 
						var NeighborDistance = distance(Neighbor)
						if (NeighborDistance <= 2 and Neighbor.IsInfected() === false and Neighbor.IsImmune() === false) {		// if Neighbor not already infected or immune
							Infect(Neighbor, distance(Neighbor))		// try to infect Neighbor
						}
					
					}
				}
			}
		}
		
		Loss()
		
		if ( Ticks === Government_announce_date ) {
			var Obey = random(100)
			if(Obey < Obey_ratio) {
				Obedient = true
			}
		}
	}
		
	def RandomMove() {
		move me random(100) to #(random(city.DimensionX), random(city.DimensionY))
	}
		
	def Infect(Neighbor : Human, Distance : real) : bool {
		var RandomValue = random(100)	// get a random value 0-99
		 
		// different infection rates based on Distance
		if (Distance <= 1) {
			return CalcInfected(Neighbor, RandomValue, Infection_rate1) // Infection_rate derived from config.json
		} 

		if (Distance <= 2) {
			return CalcInfected(Neighbor, RandomValue, Infection_rate2)
		} 
	}
	
	def CalcInfected(Neighbor : Human, RandomValue : real, ComparedTo : real) : bool {
			if (RandomValue < ComparedTo) {
				Neighbor.SetInfected(true)
				R0++
				return true
			} else {
				return false
			}		
	}

	def Recover(){ //antibodies
		if (Infected){
			Infected = false //set not infected
			Immune = true    //set immune
		}			
	}
	
	def Loss(){		
		if(Infected){
			LossTicks++
			if(LossTicks % 24 === 0){
				Energy--
				if (Vulnerable) {
					if (random(100) < 20) {
						Energy = Energy - random(4)
					}
				} else {
					if (random(100) < 5) {
						Energy = Energy - random(2)
					}
				}
				
				if (Energy < 1) {
					DeadTick = true
					kill me
				}

			}
			if(LossTicks/24 >= 15 and Energy >0 and random(100)<10){ //1 Tick == 1 hour
				Recover()
			}
		}	
	}
}
