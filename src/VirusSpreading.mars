model VirusSpreading

use Mars

grid-layer City as city

//Sheep walk around by chance, if you have grass under you, it is eaten
//If there is no grass beneath you, nothing will be done
//Every few rounds a new sheep is spawned
//It receives half of the Energy 
agent Human on City{
	observe var Rule = ""
	observe var Energy : integer //when energy goes to 0, human die.
	observe var Infected : bool = false
	observe var Immune : bool = false
	observe var obedient : bool = false
	//Regulator: "Sheep_gain_from_food" = Energy grows when eating
	// 			 "Sheep_reproduce" = Percentage chance of offspring 
	external observe var Human_gain_by_age : integer
	external observe var obey_ratio : integer
	external observe var government_announce_date : integer 
	
	//var Target : Grass
	
	initialize{
		//Spawn somewhere in the grid when the simulation starts
		pos at #(random(city.DimensionX), random(city.DimensionY))
		var nearHuman = explore Human in 2;
		
		Energy = random(Human_gain_by_age) + 10// need to be consider 
		
	}
	
		tick {
		Move();
		
		if (Infected === false and Immune === false) {	// no point if human already infected or immune
			var nearHuman = explore Human in 2;	// TODO: does it count itself? No
			var NeighborsDistance = new List<real>();	// reset list
			if (nearHuman[0] !== nil) {
				var TargetDistance = distance(nearHuman[0]);
				var TargetDistance2 = distance(nearHuman[1]);
				var TargetDistance3 = distance(nearHuman[2]);
				var TargetDistance4 = distance(nearHuman[3]);
				if (TargetDistance <= 2) {	// if nearest human close enough to cause infection
					NeighborsDistance.Add(TargetDistance);
					// TODO: add other neighbors
					each (var Distance in NeighborsDistance) {	// call GetInfected for each neighbor
						GetInfected(Distance);
					}
				}
			}
		}
	}
	def Move(){
	
		if(obedient == true&&TargetDistance <= 2&&nearHuman[0] != nil){
			Rule = "R3 - Social Distancing"
			
			nearx = nearHuman[0].GetPositionX()//runaway from the human
			neary = nearHuman[0].GetPositionY()
			if(TargetDistance2>2){
				move me 1 to #(2*xcor-nearx,2*ycor-neary)	
				}
		 	else if (TargetDistance3>2){
				  nearx2 = nearHuman[1].GetPositionX()//runaway from the human
				  neary2 = nearHuman[1].GetPositionY()
				  var avoidx = (nearx+nearx2)/2 // get middle point of two near human
				  var avoidy = (neary+neary2)/2
				  
				  move me 1 to #(2*xcor-avoidx,2*ycor-avoidy)
				  }
				  
			else {
				move me 2 to #(random(city.DimensionX), random(city.DimensionY))
			}
		}
		else{
			move me random(100) to #(random(city.DimensionX), random(city.DimensionY))
		}
	}
	

	
	

	} 
	passive Killed() => kill me
	
	//Die "Mutter" gibt dem "Kind" Werte von sich mit

	passive GetPositionX() => return xcor
	passive GetPositionY() => return ycor
}

